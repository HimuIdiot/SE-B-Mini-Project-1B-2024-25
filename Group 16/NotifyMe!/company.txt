import tkinter as tk
from tkinter import messagebox
from db import fetch_companies, insert_company_data, delete_company, update_company


class CompanyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Company Management")
        self.root.geometry("700x600")
        self.root.configure(bg="#2c3e50")

        # Frame for the company list (with Scrollbar)
        self.company_frame = tk.Frame(self.root, bg="#ecf0f1")
        self.company_frame.pack(pady=10, fill="both", expand=True)

        # Create a Canvas for Scrollable List
        self.canvas = tk.Canvas(self.company_frame, bg="#ecf0f1")
        self.scroll_y = tk.Scrollbar(self.company_frame, orient="vertical", command=self.canvas.yview)
        self.scroll_y.pack(side="right", fill="y")

        self.inner_frame = tk.Frame(self.canvas, bg="#ecf0f1")
        self.inner_frame.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))

        self.canvas.create_window((0, 0), window=self.inner_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scroll_y.set)
        self.canvas.pack(side="left", fill="both", expand=True)

        # Button Frame
        self.button_frame = tk.Frame(self.root, bg="#2c3e50")
        self.button_frame.pack(pady=10, fill="x")

        self.add_button = tk.Button(self.button_frame, text="Add New Company", command=self.open_add_company_form,
                                    bg="#3498db", fg="white", font=("Arial", 12, "bold"), padx=10, pady=5)
        self.add_button.pack(side="left", padx=10)

        self.back_button = tk.Button(self.button_frame, text="Back", command=self.root.destroy,
                                     bg="#f39c12", fg="white", font=("Arial", 12, "bold"), padx=10, pady=5)
        self.back_button.pack(side="right", padx=10)

        self.display_companies()

    def open_add_company_form(self):
        add_window = tk.Toplevel(self.root)
        add_window.title("Add Company")
        add_window.geometry("400x500")
        add_window.configure(bg="#ffffff")

        tk.Label(add_window, text="Add New Company", font=("Arial", 12, "bold"), bg="#ffffff", fg="#2980b9").pack(
            pady=10)

        self.entry_fields = {}
        labels = ["company_id", "company_name", "contact_no", "primary_business", "secondary_business", "since",
                  "email"]

        for label in labels:
            tk.Label(add_window, text=label, bg="#ffffff", fg="#2980b9").pack()
            entry = tk.Entry(add_window)
            entry.pack(pady=5, ipadx=5, ipady=2, fill="x")
            self.entry_fields[label] = entry

        button_frame = tk.Frame(add_window, bg="#ffffff")
        button_frame.pack(pady=10)

        tk.Button(button_frame, text="Submit", command=lambda: self.submit_form(add_window), bg="#27ae60", fg="white",
                  padx=10, pady=5).pack(side="left", padx=5)
        tk.Button(button_frame, text="Cancel", command=add_window.destroy, bg="#e74c3c", fg="white", padx=10,
                  pady=5).pack(side="left", padx=5)

    def submit_form(self, add_window):
        company_data = {label: field.get() for label, field in self.entry_fields.items()}

        if not all(company_data.values()):
            messagebox.showwarning("Validation Error", "All fields are required!")
            return

        if insert_company_data(**company_data):
            messagebox.showinfo("Success", "Company added successfully!")
            add_window.destroy()
            self.display_companies()
        else:
            messagebox.showerror("Error", "Failed to add company.")

    def open_edit_form(self, company):
        edit_window = tk.Toplevel(self.root)
        edit_window.title("Edit Company")
        edit_window.geometry("400x500")
        edit_window.configure(bg="#ffffff")

        tk.Label(edit_window, text="Edit Company", font=("Arial", 12, "bold"), bg="#ffffff", fg="#2980b9").pack(pady=10)

        self.edit_fields = {}
        labels = ["company_id", "company_name", "contact_no", "primary_business", "secondary_business", "since",
                  "email"]

        for label in labels:
            tk.Label(edit_window, text=label, bg="#ffffff", fg="#2980b9").pack()
            entry = tk.Entry(edit_window)
            entry.insert(0, company[label.lower().replace(" ", "_")])
            entry.pack(pady=5, ipadx=5, ipady=2, fill="x")
            self.edit_fields[label] = entry

        button_frame = tk.Frame(edit_window, bg="#ffffff")
        button_frame.pack(pady=10)

        tk.Button(button_frame, text="Update", command=lambda: self.update_company(edit_window, company['company_id']),
                  bg="#27ae60", fg="white", padx=10, pady=5).pack(side="left", padx=5)
        tk.Button(button_frame, text="Cancel", command=edit_window.destroy, bg="#e74c3c", fg="white", padx=10,
                  pady=5).pack(side="left", padx=5)

    def delete_company(self, company_id):
        """Deletes a company from the database."""
        if messagebox.askyesno("Confirm", "Are you sure you want to delete this company?"):
            if delete_company(company_id):
                messagebox.showinfo("Success", "Company deleted successfully!")
                self.display_companies()
            else:
                messagebox.showerror("Error", "Failed to delete company.")

    def update_company(self, edit_window,company_id):
        updated_data = {label: field.get() for label, field in self.edit_fields.items()}

        if update_company(**updated_data):
            messagebox.showinfo("Success", "Company updated successfully!")
            edit_window.destroy()
            self.display_companies()
        else:
            messagebox.showerror("Error", "Failed to update company.")

    def display_companies(self):
        """Displays all company records."""
        for widget in self.inner_frame.winfo_children():
            widget.destroy()

        companies = fetch_companies()

        for company in companies:
            # Frame for each company, ensuring full width and rectangular shape
            frame = tk.Frame(self.inner_frame, relief="solid", bd=2, padx=10, pady=10, bg="#ffffff")
            frame.pack(fill="x", padx=10, pady=5)  # Expands to match width of inner frame

            label_text = (f"ID: {company['company_id']}\n"
                          f"Name: {company['company_name']}\n"
                          f"Primary: {company['primary_business']}\n"
                          f"Secondary: {company['secondary_business']}\n"
                          f"Contact: {company['contact_no']}\n"
                          f"Since: {company['since']}\n"
                          f"Email: {company['email']}")

            # Label to display company info, taking up full width
            label = tk.Label(frame, text=label_text, justify="left", anchor="w", font=("Arial", 10), bg="#ffffff")
            label.pack(side="left", fill="x", expand=True, padx=5)

            # Button Frame
            button_frame = tk.Frame(frame, bg="#ffffff")
            button_frame.pack(side="right")

            # Edit button
            edit_button = tk.Button(button_frame, text="Edit", command=lambda c=company: self.open_edit_form(c),
                                    bg="#f1c40f", fg="black", font=("Arial", 10, "bold"), padx=5)
            edit_button.pack(side="left", padx=5)

            # Delete button
            delete_button = tk.Button(button_frame, text="Delete",
                                      command=lambda c=company['company_id']: self.delete_company(c),
                                      bg="#e74c3c", fg="white", font=("Arial", 10, "bold"), padx=5)
            delete_button.pack(side="left")

        self.canvas.update_idletasks()
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))  # Adjust scrolling area

        # Update scrollbar appearance (Blue scrollbar)
        self.scroll_y.config(bg="#3498db", troughcolor="#2980b9", activebackground="#1f618d")


def company():
    root1 = tk.Tk()
    root1.state("zoomed")
    app = CompanyApp(root1)
    root1.mainloop()
